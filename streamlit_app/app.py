import streamlit as st
import requests
import os
from datetime import datetime
# import pandas as pd # –ü–æ–∫–∞ –Ω–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è, –º–æ–∂–Ω–æ –∑–∞–∫–æ–º–º–µ–Ω—Ç–∏—Ä–æ–≤–∞—Ç—å –∏–ª–∏ —É–¥–∞–ª–∏—Ç—å

# --- –ù–∞—á–∞–ª—å–Ω–∞—è –ù–∞—Å—Ç—Ä–æ–π–∫–∞ ---

# –ü–æ–ª—É—á–∞–µ–º –±–∞–∑–æ–≤—ã–π URL FastAPI —Å–µ—Ä–≤–∏—Å–∞ –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π –æ–∫—Ä—É–∂–µ–Ω–∏—è
FASTAPI_BASE_URL = os.getenv("FASTAPI_BASE_URL", "http://localhost:8000") # –î–µ—Ñ–æ–ª—Ç –¥–ª—è –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ —Ç–µ—Å—Ç–∞

# URL —ç–Ω–¥–ø–æ–∏–Ω—Ç–æ–≤
CHANNELS_URL = f"{FASTAPI_BASE_URL}/channels"
SUMMARIES_URL_TEMPLATE = f"{FASTAPI_BASE_URL}/summaries/{{channel_id}}"
POSTS_URL_TEMPLATE = f"{FASTAPI_BASE_URL}/posts/{{channel_id}}/{{date_str}}"

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è —Å—Ç—Ä–∞–Ω–∏—Ü—ã Streamlit
st.set_page_config(
    page_title="–ê–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä Telegram –ö–∞–Ω–∞–ª–æ–≤",
    page_icon="üì∞",
    layout="wide"
)

st.title("üì∞ –ê–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä Telegram –ö–∞–Ω–∞–ª–æ–≤")
st.markdown("–ü—Ä–æ—Å–º–∞—Ç—Ä–∏–≤–∞–π—Ç–µ —Å–∞–º–º–∞—Ä–∏ –∏ –ø–æ—Å—Ç—ã –∏–∑ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º—ã—Ö Telegram –∫–∞–Ω–∞–ª–æ–≤.")

# --- –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è –í–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è —Å API (—Å –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏–µ–º) ---

@st.cache_data(ttl=3600) # –ö—ç—à–∏—Ä—É–µ–º –Ω–∞ 1 —á–∞—Å
def get_channels():
    """–ü–æ–ª—É—á–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –∫–∞–Ω–∞–ª–æ–≤ —Å API."""
    try:
        response = requests.get(CHANNELS_URL)
        response.raise_for_status()
        return response.json()
    except requests.exceptions.RequestException as e:
        st.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Å–ø–∏—Å–∫–∞ –∫–∞–Ω–∞–ª–æ–≤: {e}")
        return []
    except Exception as e: # –û–±—â–∏–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –¥—Ä—É–≥–∏—Ö –æ—à–∏–±–æ–∫, –Ω–∞–ø—Ä–∏–º–µ—Ä, JSONDecodeError
        st.error(f"–ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∫–∞–Ω–∞–ª–æ–≤: {e}")
        return []

@st.cache_data(ttl=600) # –ö—ç—à–∏—Ä—É–µ–º –Ω–∞ 10 –º–∏–Ω—É—Ç
def get_summaries(channel_id: int):
    """–ü–æ–ª—É—á–∞–µ—Ç —Å–ø–∏—Å–æ–∫ —Å–∞–º–º–∞—Ä–∏ –¥–ª—è —É–∫–∞–∑–∞–Ω–Ω–æ–≥–æ –∫–∞–Ω–∞–ª–∞."""
    if not channel_id:
        return []
    try:
        url = SUMMARIES_URL_TEMPLATE.format(channel_id=channel_id)
        response = requests.get(url)
        response.raise_for_status()
        summaries = response.json()
        for summary in summaries:
            if isinstance(summary.get("summary_date"), str):
                summary["summary_date"] = datetime.fromisoformat(summary["summary_date"].split("T")[0]).date() # –£–±–∏—Ä–∞–µ–º –≤—Ä–µ–º—è, –µ—Å–ª–∏ –µ—Å—Ç—å, –∏ 'Z'
        summaries.sort(key=lambda x: x["summary_date"], reverse=True)
        return summaries
    except requests.exceptions.RequestException as e:
        st.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Å–∞–º–º–∞—Ä–∏ –¥–ª—è –∫–∞–Ω–∞–ª–∞ {channel_id}: {e}")
        return []
    except Exception as e:
        st.error(f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –Ω–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Å–∞–º–º–∞—Ä–∏: {e}")
        return []


@st.cache_data(ttl=600) # –ö—ç—à–∏—Ä—É–µ–º –Ω–∞ 10 –º–∏–Ω—É—Ç
def get_posts(channel_id: int, date_str: str):
    """–ü–æ–ª—É—á–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –ø–æ—Å—Ç–æ–≤ –¥–ª—è —É–∫–∞–∑–∞–Ω–Ω–æ–≥–æ –∫–∞–Ω–∞–ª–∞ –∏ –¥–∞—Ç—ã."""
    if not channel_id or not date_str:
        return []
    try:
        url = POSTS_URL_TEMPLATE.format(channel_id=channel_id, date_str=date_str)
        response = requests.get(url)
        response.raise_for_status()
        posts = response.json()
        for post in posts:
            if isinstance(post.get("message_date"), str):
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ 'Z' –∏ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º
                date_val = post["message_date"]
                if date_val.endswith("Z"):
                    post["message_date"] = datetime.fromisoformat(date_val.replace("Z", "+00:00"))
                else:
                    post["message_date"] = datetime.fromisoformat(date_val)
        return posts
    except requests.exceptions.RequestException as e:
        st.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –ø–æ—Å—Ç–æ–≤ –¥–ª—è –∫–∞–Ω–∞–ª–∞ {channel_id} –∑–∞ {date_str}: {e}")
        return []
    except Exception as e:
        st.error(f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –Ω–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –ø–æ—Å—Ç–æ–≤: {e}")
        return []

# --- –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Session State ---
if 'selected_channel_id' not in st.session_state:
    st.session_state.selected_channel_id = None
if 'selected_summary_date_str' not in st.session_state: # –î–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Ä–∞—Å–∫—Ä—ã—Ç–∏–µ–º expander'–∞
    st.session_state.selected_summary_date_str = None
if 'posts_to_display_info' not in st.session_state: # –°–ª–æ–≤–∞—Ä—å {'channel_id': id, 'date_str': date} –∏–ª–∏ None
    st.session_state.posts_to_display_info = None


# --- –û—Å–Ω–æ–≤–Ω–∞—è –õ–æ–≥–∏–∫–∞ –ü—Ä–∏–ª–æ–∂–µ–Ω–∏—è ---

# –®–∞–≥ 1: –ó–∞–≥—Ä—É–∑–∫–∞ –∏ –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –ö–∞–Ω–∞–ª–æ–≤
channels_data = get_channels()
channel_map_name_to_id = {}
channel_map_id_to_name = {}

if channels_data:
    for channel in channels_data:
        channel_map_name_to_id[channel['display_name']] = channel['id']
        channel_map_id_to_name[channel['id']] = channel['display_name']
    
    options = ["–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞–Ω–∞–ª..."] + list(channel_map_name_to_id.keys())
    
    default_index = 0 # –ò–Ω–¥–µ–∫—Å –¥–ª—è "–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞–Ω–∞–ª..."
    if st.session_state.selected_channel_id and st.session_state.selected_channel_id in channel_map_id_to_name:
        try:
            default_index = options.index(channel_map_id_to_name[st.session_state.selected_channel_id])
        except ValueError:
            pass # –ï—Å–ª–∏ –∏–º—è –Ω–µ –Ω–∞–π–¥–µ–Ω–æ, –æ—Å—Ç–∞–Ω–µ—Ç—Å—è "–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞–Ω–∞–ª..."
    
    selected_channel_name = st.sidebar.selectbox(
        "–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞–Ω–∞–ª:",
        options,
        index=default_index
    )

    if selected_channel_name != "–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞–Ω–∞–ª...":
        new_selected_channel_id = channel_map_name_to_id[selected_channel_name]
        # –ï—Å–ª–∏ –∫–∞–Ω–∞–ª –∏–∑–º–µ–Ω–∏–ª—Å—è, —Å–±—Ä–∞—Å—ã–≤–∞–µ–º –¥–µ—Ç–∞–ª–∏ (—Å–∞–º–º–∞—Ä–∏ –∏ –ø–æ—Å—Ç—ã)
        if st.session_state.selected_channel_id != new_selected_channel_id:
            st.session_state.posts_to_display_info = None
            st.session_state.selected_summary_date_str = None
            # st.rerun() # –ú–æ–∂–Ω–æ –≤—ã–∑–≤–∞—Ç—å, –µ—Å–ª–∏ –Ω—É–∂–Ω–æ –Ω–µ–º–µ–¥–ª–µ–Ω–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ,
                       # –Ω–æ –æ–±—ã—á–Ω–æ Streamlit —Å–∞–º –ø–µ—Ä–µ—Ä–∏—Å–æ–≤—ã–≤–∞–µ—Ç –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ –≤–∏–¥–∂–µ—Ç–∞
        st.session_state.selected_channel_id = new_selected_channel_id
    else:
        if st.session_state.selected_channel_id is not None: # –ï—Å–ª–∏ –±—ã–ª –≤—ã–±—Ä–∞–Ω –∫–∞–Ω–∞–ª, –∞ —Ç–µ–ø–µ—Ä—å "–í—ã–±–µ—Ä–∏—Ç–µ..."
            st.session_state.selected_channel_id = None
            st.session_state.posts_to_display_info = None
            st.session_state.selected_summary_date_str = None
            st.rerun() # –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞–µ–º, —á—Ç–æ–±—ã –æ—á–∏—Å—Ç–∏—Ç—å –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ
        st.info("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –∫–∞–Ω–∞–ª –∏–∑ —Å–ø–∏—Å–∫–∞ —Å–ª–µ–≤–∞ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏.")
else:
    st.sidebar.warning("–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å —Å–ø–∏—Å–æ–∫ –∫–∞–Ω–∞–ª–æ–≤.")
    if st.session_state.selected_channel_id is not None: # –ï—Å–ª–∏ –±—ã–ª –≤—ã–±—Ä–∞–Ω –∫–∞–Ω–∞–ª, –∞ —Ç–µ–ø–µ—Ä—å –æ—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏
        st.session_state.selected_channel_id = None
        st.session_state.posts_to_display_info = None
        st.session_state.selected_summary_date_str = None
        st.rerun()

st.divider()

# –®–∞–≥ 2: –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –°–ø–∏—Å–∫–∞ –°–∞–º–º–∞—Ä–∏
if st.session_state.selected_channel_id:
    current_channel_name = channel_map_id_to_name.get(st.session_state.selected_channel_id, "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –∫–∞–Ω–∞–ª")
    st.subheader(f"–°–∞–º–º–∞—Ä–∏ –¥–ª—è –∫–∞–Ω–∞–ª–∞: ¬´{current_channel_name}¬ª")

    with st.spinner(f"–ó–∞–≥—Ä—É–∑–∫–∞ —Å–∞–º–º–∞—Ä–∏ –¥–ª—è –∫–∞–Ω–∞–ª–∞ ¬´{current_channel_name}¬ª..."):
        summaries = get_summaries(st.session_state.selected_channel_id)

    if summaries:
        for summary in summaries:
            summary_date_obj = summary["summary_date"] # –î–æ–ª–∂–µ–Ω –±—ã—Ç—å —É–∂–µ datetime.date
            date_str_iso = summary_date_obj.isoformat()
            date_str_formatted = summary_date_obj.strftime("%d %B %Y")
            
            # –†–∞—Å–∫—Ä—ã–≤–∞–µ–º expander, –µ—Å–ª–∏ –µ–≥–æ –¥–∞—Ç–∞ —Å–æ–≤–ø–∞–¥–∞–µ—Ç —Å selected_summary_date_str
            # –∏ –µ—Å–ª–∏ —Å–µ–π—á–∞—Å –Ω–µ –æ—Ç–æ–±—Ä–∞–∂–∞—é—Ç—Å—è –ø–æ—Å—Ç—ã (–∏–ª–∏ –µ—Å–ª–∏ –æ—Ç–æ–±—Ä–∞–∂–∞—é—Ç—Å—è –ø–æ—Å—Ç—ã –¥–ª—è –î–†–£–ì–û–ô –¥–∞—Ç—ã)
            is_expanded = (st.session_state.selected_summary_date_str == date_str_iso) and \
                          (not st.session_state.posts_to_display_info or \
                           st.session_state.posts_to_display_info.get("date_str") != date_str_iso)


            with st.expander(f"–°–∞–º–º–∞—Ä–∏ –∑–∞ {date_str_formatted}", expanded=is_expanded):
                st.markdown(f"**–î–∞—Ç–∞:** {date_str_formatted}")
                st.markdown(summary["summary_text"])
                
                button_key = f"show_posts_{st.session_state.selected_channel_id}_{date_str_iso}"
                if st.button("–ü–æ–∫–∞–∑–∞—Ç—å –ø–æ—Å—Ç—ã –∑–∞ —ç—Ç–æ—Ç –¥–µ–Ω—å", key=button_key):
                    st.session_state.posts_to_display_info = {
                        "channel_id": st.session_state.selected_channel_id,
                        "date_str": date_str_iso
                    }
                    st.session_state.selected_summary_date_str = date_str_iso
                    st.rerun()
    elif current_channel_name != "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –∫–∞–Ω–∞–ª":
        st.info(f"–°–∞–º–º–∞—Ä–∏ –¥–ª—è –∫–∞–Ω–∞–ª–∞ ¬´{current_channel_name}¬ª –ø–æ–∫–∞ –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç.")

# –ö–æ–Ω—Ç–µ–π–Ω–µ—Ä –¥–ª—è –ø–æ—Å—Ç–æ–≤
posts_placeholder = st.empty()

# –®–∞–≥ 3: –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –ü–æ—Å—Ç–æ–≤
if st.session_state.posts_to_display_info:
    info = st.session_state.posts_to_display_info
    channel_id_for_posts = info["channel_id"]
    date_str_for_posts = info["date_str"]

    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ—Å—Ç—ã —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –æ–Ω–∏ –¥–ª—è —Ç–µ–∫—É—â–µ–≥–æ –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –∫–∞–Ω–∞–ª–∞
    if channel_id_for_posts == st.session_state.selected_channel_id:
        with posts_placeholder.container(): # –ò—Å–ø–æ–ª—å–∑—É–µ–º .container() –Ω–∞ placeholder
            current_channel_name_for_posts = channel_map_id_to_name.get(channel_id_for_posts, "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –∫–∞–Ω–∞–ª")
            formatted_date_for_header = datetime.fromisoformat(date_str_for_posts).strftime('%d %B %Y')
            
            st.subheader(f"–ü–æ—Å—Ç—ã –∑–∞ {formatted_date_for_header} –¥–ª—è –∫–∞–Ω–∞–ª–∞ ¬´{current_channel_name_for_posts}¬ª")

            with st.spinner(f"–ó–∞–≥—Ä—É–∑–∫–∞ –ø–æ—Å—Ç–æ–≤..."):
                posts = get_posts(channel_id_for_posts, date_str_for_posts)

            if posts:
                for post in posts:
                    post_date_obj = post["message_date"] # –î–æ–ª–∂–µ–Ω –±—ã—Ç—å —É–∂–µ datetime.datetime
                    st.markdown(f"---")
                    st.caption(f"–û–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–æ: {post_date_obj.strftime('%d.%m.%Y %H:%M:%S')}")
                    if post.get("text"):
                        st.markdown(post["text"])
                    else:
                        st.markdown("_–°–æ–æ–±—â–µ–Ω–∏–µ –±–µ–∑ —Ç–µ–∫—Å—Ç–∞ (–≤–æ–∑–º–æ–∂–Ω–æ, —Ç–æ–ª—å–∫–æ –º–µ–¥–∏–∞)_")
                st.markdown(f"---")
            elif current_channel_name_for_posts != "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –∫–∞–Ω–∞–ª":
                st.info(f"–ü–æ—Å—Ç—ã –¥–ª—è –∫–∞–Ω–∞–ª–∞ ¬´{current_channel_name_for_posts}¬ª –∑–∞ {formatted_date_for_header} –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.")
            
            if st.button("–°–∫—Ä—ã—Ç—å –ø–æ—Å—Ç—ã / –ù–∞–∑–∞–¥ –∫ —Å–∞–º–º–∞—Ä–∏", key="hide_posts_button_v3"):
                st.session_state.posts_to_display_info = None
                # selected_summary_date_str –æ—Å—Ç–∞–µ—Ç—Å—è, —á—Ç–æ–±—ã expander –±—ã–ª –æ—Ç–∫—Ä—ã—Ç
                st.rerun()
    else:
        # –ï—Å–ª–∏ –≤—ã–±—Ä–∞–Ω–Ω—ã–π –∫–∞–Ω–∞–ª –∏–∑–º–µ–Ω–∏–ª—Å—è, –∞ posts_to_display_info –µ—â–µ –æ—Ç —Å—Ç–∞—Ä–æ–≥–æ, –æ—á–∏—â–∞–µ–º
        st.session_state.posts_to_display_info = None
        posts_placeholder.empty() # –û—á–∏—â–∞–µ–º –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä
        # st.rerun() # –ú–æ–∂–Ω–æ –≤—ã–∑–≤–∞—Ç—å, —á—Ç–æ–±—ã –Ω–µ–º–µ–¥–ª–µ–Ω–Ω–æ —É–±—Ä–∞—Ç—å, –Ω–æ —Å–ª–µ–¥—É—é—â–∞—è –æ—Ç—Ä–∏—Å–æ–≤–∫–∞ —ç—Ç–æ —Å–¥–µ–ª–∞–µ—Ç

elif not st.session_state.selected_channel_id and not channels_data: # –ï—Å–ª–∏ –∫–∞–Ω–∞–ª—ã –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω—ã
    pass # –°–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ –∑–∞–≥—Ä—É–∑–∫–∏ –∫–∞–Ω–∞–ª–æ–≤ —É–∂–µ –µ—Å—Ç—å
elif not st.session_state.selected_channel_id and channels_data: # –ï—Å–ª–∏ –∫–∞–Ω–∞–ª—ã –∑–∞–≥—Ä—É–∂–µ–Ω—ã, –Ω–æ –Ω–∏ –æ–¥–∏–Ω –Ω–µ –≤—ã–±—Ä–∞–Ω
    pass # –°–æ–æ–±—â–µ–Ω–∏–µ "–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞–Ω–∞–ª..." —É–∂–µ –µ—Å—Ç—å