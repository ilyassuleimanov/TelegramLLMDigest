version: '3.8' # Указываем версию Docker Compose

services:
  # Сервис базы данных PostgreSQL
  postgres-db:
    image: postgres:15 # Используем официальный образ PostgreSQL версии 15
    container_name: postgres-db # Имя контейнера для удобства
    environment:
      # Эти переменные используются образом postgres для инициализации БД при первом запуске
      POSTGRES_USER: ${DB_USER} # Берем значения из .env файла
      POSTGRES_PASSWORD: ${DB_PASSWORD} # Берем значения из .env файла
      POSTGRES_DB: ${DB_NAME} # Берем значения из .env файла
    volumes:
      - postgres-data:/var/lib/postgresql/data # Монтируем именованный том для хранения данных БД
    ports:
      - "5433:5432" # Пробрасываем порт БД на хост (5433 на хосте -> 5432 в контейнере)
                    # Используем 5433, чтобы не конфликтовать с локальным Postgres, если он есть
                    # Это нужно в основном для отладки (подключение извне)
    restart: unless-stopped # Перезапускать контейнер, если он остановился (кроме ручной остановки)

  # Сервис для запуска Python-скрипта парсера
  telegram-parser:
    build: . # Собираем образ из Dockerfile в текущей директории (.)
    container_name: telegram-parser
    env_file:
      - .env # Загружаем все переменные из .env файла в окружение этого контейнера
    depends_on:
      - postgres-db # Запускать этот сервис ТОЛЬКО ПОСЛЕ того, как запустится сервис postgres-db
                    # Внимание: это не гарантирует, что БД ПОЛНОСТЬЮ готова принимать соединения!
    volumes:
      # Монтируем локальную папку ./session в папку /app/session внутри контейнера
      # Это позволяет скрипту читать/писать файл сессии Telegram (.session)
      - ./session:/app/session
    restart: no # Не перезапускать автоматически (скрипт должен выполниться один раз и завершиться)

volumes:
  # Определяем именованный том для данных PostgreSQL
  postgres-data: