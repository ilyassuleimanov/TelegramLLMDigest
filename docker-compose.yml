version: '3.8'

services:
  # Сервис базы данных PostgreSQL
  postgres_db: # Переименован для ясности и соответствия DB_HOST
    image: postgres:15
    container_name: postgres_db_service
    environment:
      POSTGRES_DB: ${DB_NAME}
      POSTGRES_USER: ${DB_USER}
      POSTGRES_PASSWORD: ${DB_PASSWORD}
    volumes:
      - postgres_data:/var/lib/postgresql/data
      # Если нужно, можно монтировать SQL для инициализации (но мы делаем это в коде)
      # - ./database/schema.sql:/docker-entrypoint-initdb.d/init.sql
    ports:
      # Используем ${DB_PORT} из .env для хост-порта, 5432 для порта контейнера
      - "${DB_PORT}:5432"
    networks:
      - app-network # Добавлено для явного указания сети
    restart: unless-stopped

  # Сервис для запуска Python-скрипта парсера
  parser: # Переименован для краткости
    build:
      context: ./parser # <-- Указываем папку парсера
      dockerfile: Dockerfile
    container_name: parser_service
    env_file:
      - .env
    depends_on:
      - postgres_db # Зависит от БД
    volumes:
      # Путь внутри контейнера (/app/session) должен совпадать с тем, что ожидает скрипт парсера
      - ./session:/app/session
    networks:
      - app-network # Добавлено для явного указания сети
    restart: no # Обычно парсер запускается по расписанию или вручную

  # Сервис для запуска Python-скрипта суммаризатора
  summarizer:
    build:
      context: ./summarizer # <-- Указываем папку суммаризатора
      dockerfile: Dockerfile
    container_name: summarizer_service
    env_file:
      - .env
    depends_on:
      - postgres_db
      - parser
    networks:
      - app-network # Добавлено для явного указания сети
    restart: no # Запускается по необходимости (пока вручную или позже через Airflow)

volumes:
  postgres_data:

networks:
  app-network: # Определяем сеть
    driver: bridge